#creating 3D vector from 2D vector
class C2dVec:
   def __init__(self,i,j):
     self.icap=i
     self.jcap=j
   def __str__(self):
       return f"{self.icap}i + {self.jcap}j"
        
class C3dVec(C2dVec):
    def __init__(self,i,j,k):
       super().__init__(i,j)  #it call methods of C2dVec class
       self.kcap=k
    def __str__(self):
       return f"{self.icap}i + {self.jcap}j + {self.kcap}k"

v2d=C2dVec(1,3)
v3d=C3dVec(1,9,7)
print(v2d)
print(v3d)


# Python example to show that base class members can be accessed in derived class using base class name
class Base(object):

	def __init__(self, x):
		self.x = x	

class Derived(Base):
	def __init__(self, x, y):
		Base.x = x
		self.y = y

	def printXY(self):
	
    	  print(Base.x, self.y)
d = Derived(10, 20)
d.printXY()
